<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Beginner | OpenSensors.IO]]></title>
  <link href="http://blog.opensensors.io/blog/categories/beginner/atom.xml" rel="self"/>
  <link href="http://blog.opensensors.io/"/>
  <updated>2015-01-26T11:13:14+00:00</updated>
  <id>http://blog.opensensors.io/</id>
  <author>
    <name><![CDATA[OpenSensors.IO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OwnTracks Journey - Part One]]></title>
    <link href="http://blog.opensensors.io/blog/2015/01/20/owntracks-journey-part-one/"/>
    <updated>2015-01-20T12:56:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2015/01/20/owntracks-journey-part-one</id>
    <content type="html"><![CDATA[<p>Today we’re going to look at using the OwnTracks app within the OpenSensors platform. <a href="http://owntracks.org">&lsquo;OwnTracks&rsquo; (formerly MQTTitude)</a> allows you to keep track of your connected devices location. The app is open-source and uses open protocols for secure and private communications. First off we’ll start by installing the OwnTracks app on our device, I’m using a Nexus tablet for this attempt. Also, make sure your device <em>Location Data is enabled</em>. Whilst we’re waiting for that to sort itself out, let’s open up OpenSensors.io.</p>

<p>If you haven’t already, create a new account, when you’re in &ndash; select Devices on the nav bar to the left. You should see the interface below.</p>

<p><img src="/images/createdev.jpg" /></p>

<p>Click <em>Create New Device</em>, give it a name and, optionally, a description (what is your device?). Importantly, choose whether you’d like to publish your data as public Open Data or Private Data. Whilst we’re on this screen, take note of the <em>Client ID</em> and <em>Password</em>, if you forget or lose your device password, don’t worry, just come back to <a href="https://opensensors.io/devices">this page</a>, select your device and click the small padlock icon on the far right next to the bin, this will reset your password.</p>

<p>Now we’ve got that sorted, let’s run OwnTracks on our device. You should see this screen. In the top right we see two buttons, on the left is the Report button, essentially submitting data to our server, and the right, options. Click options and then preferences.</p>

<p><img src="/images/owntracks.png" /> alongside <img src="/images/owntrackspref.png" /></p>

<p>As you can see we’re currently disconnected from any network, let’s change that. Firstly, click <em>Advanced</em> and select <em>Advanced connection preferences</em>. Now go back to preferences menu and click <em>Connection</em> and input the following &ndash; input your own <em>username</em>, <em>Device ID</em> and <em>Device Password</em> as displayed earlier on OpenSensors.io device manager, and type OpenSensors.io as <em>Host</em> and 1883 as <em>Port Number</em>. Change <em>Connection Security</em> to None. These are OSIO’s settings. You can go back to Preferences and change the automatic reporting interval etc.</p>

<p><img src="/images/owntracksconnection.png" /></p>

<p>We’re all set. Now let’s go back to our devices page, and scroll down to the <em>Events</em> box, whereas before it looked this…</p>

<p><img src="/images/events1.jpg" /></p>

<p>We should now be publishing data &ndash; test your new connected device, publishing your location data by pressing the <em>Report</em> button on the OwnTracks main screen. Each time you submit data through the app you should see…</p>

<p><img src="/images/eventssuccess.jpg" /></p>

<p>You’re now publishing Open Data through the OpenSensors.io messaging broker! From this you are able to create smart apps and projects using your data, all we need to do now is have your app and project subscribe to our twitter hashtags of the IoT, topics &ndash; but you’ll have to wait and see until part two of our OwnTrack journey!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing an Arduino Wifi Shield]]></title>
    <link href="http://blog.opensensors.io/blog/2014/11/19/installing-an-arduino-wifi-shield/"/>
    <updated>2014-11-19T20:07:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2014/11/19/installing-an-arduino-wifi-shield</id>
    <content type="html"><![CDATA[<p>After a few Arduino projects (mainly blinking LEDs and connecting sensors) I tried
to connect my Arduino to the internet using a Wifi shield!</p>

<p>I started by looking at Arduino Wifi shield <a href="http://arduino.cc/en/Guide/ArduinoWiFiShield">instructions</a>.</p>

<p>Then I physically connected my Arduino and Wifi shield:</p>

<p><img src="/images/arduino-wifishield.jpg" /></p>

<p>As a test I wanted to scan for available networks using the example code on <a href="http://arduino.cc/en/Guide/ArduinoWiFiShield#toc5">this</a>
Arduino Wifi shield webpage.</p>

<p>I mentioned in a previous blog <a href="http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux/">post</a>
I had an issue with the Arduino IDE and now use <a href="http://inotool.org/">inotool</a>.
It enables to code for Arduino in your text editor/IDE of choice and compile and
upload code from the command line (but it still needs the Arduino IDE to be installed).</p>

<p>Here&rsquo;s how I start a project with inotool:</p>

<pre><code>~$ mkdir new_project && cd new_project</code>
<code>~$ ino init</code></pre>


<p>Here&rsquo;s the structure of my project afterwards:</p>

<p><img src="/images/directory_structure.png" /></p>

<p>I can then edit the code in src/sketch.ino. In that case I just copied/pasted
the code from Arduino&rsquo;s example:</p>

<p><img src="/images/Test_wifishield.png" /></p>

<p>I built as usual using this command: <pre><code>~$ ino build</code></pre> &hellip; and got
the following error:</p>

<p><img src="/images/build_error_wifi.png" /></p>

<p>=> It seemed there was a conflict between the Ethernet and WiFi Libraries.</p>

<p>&hellip; Then I kind of lost it (O_O) and tried all those things:</p>

<ul>
<li>bypassing both Arduino IDE and inotool by using a Makefile for compiling Arduino (<a href="http://hardwarefun.com/tutorials/compiling-arduino-sketches-using-makefile">http://hardwarefun.com/tutorials/compiling-arduino-sketches-using-makefile</a>)
   => and I got lost down makefile rabbit hole&hellip;</li>
<li>updating (or trying to update) the wifi shield firmware using Arduino&rsquo;s <a href="http://arduino.cc/en/Hacking/WiFiShieldFirmwareUpgrading">instructions</a> and blog posts.
  => when I finally managed it, it didn&rsquo;t have any effect&hellip;</li>
<li>downgrading from Arduino IDE version 1.0.5 to 1.0.2 (older versions are found <a href="http://arduino.cc/en/Main/OldSoftwareReleases">here</a>).
  => no improvement really&hellip;</li>
</ul>


<p>I went back and forth between those solutions and at best I could compile the sketch but my MAC address was 0.0.0.0 (same for my IP address)!</p>

<p><strong>Here&rsquo;s how it finally worked for me:</strong></p>

<ul>
<li>I downgraded to Arduino IDE version 1.0.1.</li>
<li>Copied &ldquo;arduino-1.0.1&rdquo; in usr/share/ and renamed it to &ldquo;arduino&rdquo; so that the path to the IDE was /usr/share/arduino/.</li>
<li>I added wifishield/ folder from <a href="https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield">https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield</a> to /usr/share/arduino/hardware/arduino/firmwares/.</li>
<li>I added the WiFi library from <a href="https://github.com/arduino/Arduino/tree/master/libraries/WiFi">https://github.com/arduino/Arduino/tree/master/libraries/WiFi</a> to /usr/share/arduino.</li>
<li>I upgraded the firmware (not sure if necessary) => <em>Note</em> : you need a USB 2.0 Mini B cable to link the wifi shield directly to your computer!

<ul>
<li> here are the instructions to install dfu-programmer: <a href="https://github.com/dfu-programmer/dfu-programmer">https://github.com/dfu-programmer/dfu-programmer</a></li>
<li> and you can get the latest wifi shield scripts from <a href="https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield/scripts">https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield/scripts</a></li>
<li> replace your scripts in /usr/share/arduino/hardware/arduino/firmwares/wifishield/scripts/ with the ones from Arduino Github repo.</li>
<li> close the J3 jumper on the shield (***),
   then run:
   <pre><code>~$ sudo ./ArduinoWifiShield_upgrade.sh -a /usr/share/arduino -f all</code></pre></li>
</ul>
</li>
</ul>


<p>Yay! (^o^) You can now try new projects like creating a <a href="http://arduino.cc/en/Tutorial/WiFiWebServer">webserver</a> or sending sensor data via internet!</p>

<br>


<p>(***) In case you wonder what a <strong>J3 jumper</strong> looks like,
those pictures could be useful to you:</p>

<ul>
<li>Here the J3 jumper is open (for when the shield communicate with the Arduino):</li>
</ul>


<p><img src="/images/j3_opened.jpg" /></p>

<ul>
<li>Here the J3 jumper is closed (or in programming mode, to update the firmware):</li>
</ul>


<p><img src="/images/j3_closed.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Arduino on Linux (Ubuntu)]]></title>
    <link href="http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux/"/>
    <updated>2014-09-13T07:56:00+01:00</updated>
    <id>http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux</id>
    <content type="html"><![CDATA[<p>Ordered and received your Arduino Uno (I actually received it a while ago!) now what? The first step is to rush to the <a href="http://arduino.cc/en/Guide/HomePage">&lsquo;Getting Started&rsquo;</a> page on Arduino&rsquo;s website.</p>

<p>To install Arduino on Linux (I&rsquo;m running Ubuntu 14.04) visit the <a href="http://playground.arduino.cc/Learning/Linux">wiki page</a> with instructions for most Linux distributions. I used the instructions for Ubuntu 12.04 or newer and ran <pre><code>~$ sudo apt-get update &amp;&amp; sudo apt-get install arduino arduino-core</code></pre>
Afterwards you should be able to plug your Arduino and use Arduino IDE to code/upload code to it. It didn&rsquo;t work directly for me. I couldn&rsquo;t launch Arduino IDE by clicking the logo so I tried the CLI <pre><code>~$ arduino</code></pre> Here&rsquo;s the error it returned:</p>

<blockquote><p>Exception in thread &ldquo;main&rdquo; java.lang.ExceptionInInitializerError.</p></blockquote>

<p><img src="/images/arduino_bug1.png" /></p>

<p>I found a solution on <a href="http://askubuntu.com/questions/26474/unable-to-install-arduino">AskUbuntu</a> forum. I downgraded from java 7 to java 6 <strong>(***)</strong> using the command: <pre><code>~$ sudo update-alternatives &mdash;config java</code></pre>
I then managed to launch Arduino from the CLI (I was asked to authenticate) and tried to upload a code example to my Arduino (Files > Examples > 01.Basics > Blink).
I received this error message:</p>

<blockquote><p>processing.app.SerialNotFoundException: Serial port &lsquo;COM1&rsquo; not found. Did you select the right one from the Tools > Serial Port menu?</p></blockquote>

<p><img src="/images/arduinobug2.png" /></p>

<p>In Tools I saw that Serial Port was greyed out so I couldn&rsquo;t even select the port.
from <a href="http://stackoverflow.com/questions/19322432/arduino-tools-serial-port-greyed-out">Stackoverflow</a> I found that to give read and write privilege on the usb port I could run Arduino with the administrator privileges.
And so I used <pre><code>~$ sudo arduino</code></pre> &ndash;> It worked! It blinked!
Here&rsquo;s a proof:</p>

<p><img src="/images/arduino_blinks.jpg" /></p>

<h2>Troubleshooting</h2>

<ul>
<li>Check your Arduino IDE settings: Tools > Board (the right borad is select), Tool > Serial Port (the right port for your device is ticked).</li>
<li>Check all dependencies were downloaded with arduino and arduino-core .

<ul>
<li>Arduino&rsquo;s dependencies: arduino-core, default-jre, libjna-java, librtx-java</li>
<li>Arduino-core&rsquo;s dependencies: avr-libc, avrdude, gcc, gcc-avr</li>
</ul>
</li>
<li>Also try LadyAda&rsquo;s <a href="http://www.ladyada.net/learn/arduino/help.html">help page</a>.</li>
</ul>


<p><strong>(***) Well, well. You might realise later that you actually need java 7 for another program to work! But fear not, see the alternatives below.</strong></p>

<h2>Alternatives to Arduino IDE</h2>

<p><a href="http://arduino.cc/en/main/software">Arduino IDE</a> is based on java but luckily there other tools to write code for Arduino.</p>

<p>I tried <a href="http://inotool.org/">Ino</a> which is written in Python and is a command line tool and allows to write code in any text editor.
It is straightforward to install with instructions given. You will need to install picocom program if you don&rsquo;t have it <pre><code>~$ sudo apt-get install picocom</code></pre>
There are other <a href="https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces">alternatives</a> to the Arduino IDE like <a href="https://codebender.cc/">Codebender</a> which is an online development platform.</p>
]]></content>
  </entry>
  
</feed>
