<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[OpenSensors.IO]]></title>
  <link href="http://blog.opensensors.io/atom.xml" rel="self"/>
  <link href="http://blog.opensensors.io/"/>
  <updated>2015-03-17T12:30:59+00:00</updated>
  <id>http://blog.opensensors.io/</id>
  <author>
    <name><![CDATA[OpenSensors.IO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[European Parliament Approves eCall Technology]]></title>
    <link href="http://blog.opensensors.io/blog/2015/03/17/european-parliament-approves-ecall-technology/"/>
    <updated>2015-03-17T10:57:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2015/03/17/european-parliament-approves-ecall-technology</id>
    <content type="html"><![CDATA[<p><img src="http://blog.opensensors.io/images/autobahn.jpg" /></p>

<p>European Parliament approves life-saving eCall Internet of Things technology</p>

<p>The Internet of Things threatens to revolutionise everyday life, embedding and imbuing everyday objects and the world around us with sensors, software and electronics. Through machine-to-machine communication, automation and advanced analytics, we are able to understand and scrutinise our environment and the processes which surround us in ways never conceived. From high level analysis allowing automated condition monitoring of critical engine parts, giving engineers the tools to reduce costly operational downtime to embedding real-time sensors in bridges to predict stresses and flooding. Beyond the Cloud, the Internet of Things brings the internet to the everyday, and there are clear use cases for such technologies in the realm of road safety.</p>

<p>This is where eCall comes in. eCall is a European Commission initiative coming into force on 31 March 2018, making mandatory the deployment of internet-connected sensors into cars that enable emergency services to be immediately contacted and requested automatically after a serious road incident within the European Union. EC VP for Digital, Neelie Kroes, argues “EU-wide eCall is a big step forward for road safety. When you need emergency support it&rsquo;s much better to be connected than to be alone.” eCall will drastically cut European emergency service response times, even in cases where passengers are unable to speak through injury, by sending a Minimum Set of Data (MSD), including the exact location of the crash site.</p>

<p>The deployment of eCall is one of most ambitious EU-wide programs
since the 2007 enlargement, rolling out implementation of the eCall
platform to some 230 million cars and 33 million trucks in the
European Union. Implementation of eCall at a European level (including
Norway, Switzerland etc) however benefits consumers and industry
through reducing costs due to economies of scale, reducing the
installation cost to as little as €100. The basic pan-European eCall
service will be free at the point of use for equipped vehicles. It is
likely that the eCall technology platform (i.e., positioning,
processing and communication modules) will be exploited commercially
too, for stolen vehicle tracking, dynamic insurance schemes, eTolling
and emerging forms of vehicle-to-vehicle (V2V) and
vehicle-to-infrastructure (V2I) road safety systems. eCall will be
based upon a standardised platform, one system for the entirety of
Europe, the idea is to enable both car and telecoms industries a quick roll out and to avoid crippling OEM versioning and patching <a href="https://www.ftc.gov/news-events/blogs/techftc/2015/02/whats-security-shelf-life-iot?page=1">issues</a>.</p>

<p>In terms of privacy, the basic eCall system has been given the green light by the European Commission on the express condition that <a href="http://ec.europa.eu/information_society/newsroom/cf/dae/document.cfm?doc_id=5963">firm data protection safeguards</a> are in place and that the sensor-equipped vehicles will not push data to external servers except in the case of a crash, or by the actions of the driver, in order to contact the PSAP (Public Safety Answering Point) and will lie dormant until that point. The data transmitted to the emergency services, described as MSD, Minimum Set of Data, are those strictly needed by the emergency services to handle the emergency situation. While in normal operation mode the system is not registered to any telecoms network and no mediating parties have access to the MSD that is transmitted to the PSAPs.</p>

<p>Today the European Parliament&rsquo;s Internal Market and Consumer
Protection Committee MEPs
<a href="http://www.europarl.europa.eu/news/en/news-room/content/20150316IPR34756/html/Internal-market-MEPs-green-light-life-saving-emergency-call-system-for-cars">voted on and approved eCal</a>
pushing
forward a life-saving Internet of Things technology that will
significantly improve European road safety. The UK Government however,
has not followed suit, whilst welcoming the implementation in other
member states, feels that &ldquo;it is not cost-effective &hellip; given the
increasing responsiveness of our road network, we feel that smart
motorways do the same thing,&rdquo; remarked Minister Perry on behalf of the
Department of Transport. Will this decision potentially leaving those not on Britain&rsquo;s motorways, drivers in rural and urban areas, in the dark?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measuring Air Quality on Opensensors]]></title>
    <link href="http://blog.opensensors.io/blog/2015/02/22/measuring-air-quality-on-opensensors/"/>
    <updated>2015-02-22T22:22:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2015/02/22/measuring-air-quality-on-opensensors</id>
    <content type="html"><![CDATA[<h3><strong>Measuring the air quality of the ODI using an Arduino and a Shinyei PPD-42</strong></h3>

<p>So, whilst thinking of a good demonstration for the Opensensors platform, we thought why not see how polluted our workplace is by hooking up a sensor to publish a continuous data stream to the Opensensors messaging broker.<br/>
For this we need an easy to pick up and use sensor,  we settled on the Shinyei PPD-42. We&rsquo;ll use this in order to measure the number of potentially hazardous small particulates in the air, with an arduino connected to a linux PC (or Raspberry PI).</p>

<p>To run this mini-project you will need:</p>

<ol>
<li>Shinyei PPD-42</li>
<li>Arduino UNO</li>
<li>Computer with Linux installed (you can use a Raspberry PI)</li>
</ol>


<p>We are basing this run-through on a project called DustDuino that uses the Shinyei PPD-42 sensor with an arduino and a wifi module. Check it out <a href="http://www.mentalmunition.com/2013/10/measure-air-pollution-in-your-home-or.html">here</a>. We used this project as our reference when setting up the sensor and writing the Arduino code.</p>

<p><img src="http://blog.opensensors.io/images/pic6.jpg" /></p>

<p>Firstly we follow step 2 of the instructions for hooking up the sensor to the Arduino.
Then we download the code from the projects <a href="https://github.com/NodeJournalism/DustDuino">github repository</a> by opening the link for the code DustDuinoSerial.ino selecting raw and saving that page.</p>

<p><img src="http://blog.opensensors.io/images/pic1.png" /></p>

<p>Opening this up in the arduino IDE, we now upload it to our Arduino UNO by connecting the Arduino and pressing upload.</p>

<p><img src="http://blog.opensensors.io/images/pic2.png" /></p>

<p>You can check the data is coming in by using the Arduino IDE’s serial monitor.</p>

<p><img src="http://blog.opensensors.io/images/pic3.png" /></p>

<p>We then need to figure out how to send the incoming serial message to the Opensensors message broker.</p>

<p>To do this we chose to write a Python script. We used the <a href="https://pypi.python.org/pypi/paho-mqtt">Mosquitto Python module</a>.
I’m going to assume that you already have Python installed, as it comes pre-packaged on most versions of Linux.
If you don’t have it already, you&rsquo;ll need to install pip to download and set up the Mosquitto python module. On Ubuntu or Debian this can be done with the following command:</p>

<pre><code>sudo apt-get install python-pip
</code></pre>

<p>Once pip is installed we can install the Mosquitto python client module using the following command:</p>

<pre><code>sudo pip install paho-mqtt
</code></pre>

<p>You can find out how to use the python module by having a read through the website which we’ve linked above.
Writing and compiling python is really easy.</p>

<h3>Hello Python World</h3>

<p>Open up your favorite plaintext editor. Enter the line:</p>

<pre><code>print “Hello World”
</code></pre>

<p>Save it as hi.py. Then in terminal, navigate to your document and enter the command:</p>

<pre><code>python hi.py
</code></pre>

<p>You should see your “Hello World” response. It’s that easy.</p>

<h3>Hello Opensensors</h3>

<p>To use the Mosquitto client python module we can run the following code to test out publishing. You’ll need to replace my username “Louis” (keeping the speech marks), and password with your details:</p>

<p>The mosquitto library we need to communicate with the Opensensors message broker:</p>

<pre><code>import paho.mqtt.client as mqtt
</code></pre>

<p>Initialise the client option with our client ID of our device:</p>

<pre><code>mqttc = mqtt.Client(client_id="939")
</code></pre>

<p>Set our username and password:</p>

<pre><code>mqttc.username_pw_set("Louis", password="AbcDEFgH")
</code></pre>

<p>Connect to the Opensensors server:</p>

<pre><code>mqttc.connect("opensensors.io")
</code></pre>

<p>Publish a message to say hello:</p>

<pre><code>mqttc.publish("/users/Louis/test2", payload="Hello Opensensors!", qos=0, retain=False)
</code></pre>

<p>Disconnect:</p>

<pre><code>mqttc.disconnect();
</code></pre>

<p>Success, you should now have a functioning sensor :)</p>

<p><img src="http://blog.opensensors.io/images/pic4.png" /></p>

<p>Next we need to get the serial working. To find out what your arduino serial port looks like we executed  following command into terminal:</p>

<pre><code>dmesg | grep tty
</code></pre>

<p>The output was something like this&hellip;</p>

<pre><code>[    0.000000] console [tty0] enabled
[ 3522.192687] cdc_acm 7-1:1.0: ttyACM0: USB ACM device
</code></pre>

<p>The second line has details of our Ardiuno. The ttyACM0 is the device name and ‘/dev/ttyACM0’ is the serial port.</p>

<p>To open and read the serial port Python makes it really easy. You can run a little test to check whether it is working by using the following code:</p>

<p>For communication with the Arduino we need to use the serial library:</p>

<pre><code>import serial
ser = serial.Serial(‘/dev/ttyACM0’) # open first serial port
while True:
print ser.readline()        # prints each line it reads from serial
</code></pre>

<p><img src="http://blog.opensensors.io/images/pic5.jpg" /></p>

<p>Finally we just need to hack together the two pieces. Here is the code we used:</p>

<pre><code>import serial
import paho.mqtt.client as mqtt
import time

mqttc = mqtt.Client(client_id="939")
mqttc.username_pw_set("Louis", password="AbcDEFgH")
mqttc.connect("opensensors.io")

ser = serial.Serial('/dev/ttyACM0')  # open first serial port
while True:
message= ser.readline()
print message
mqttc.publish("/users/Louis/ODI/airquality", payload=message, qos=0, retain=False)
time.sleep(1);
</code></pre>

<p>Running this we were publishing our sensor data to Opensensors!</p>

<p>WE recommend adjusting the Arduino code to output the data in JSON format. This will make it easier to read and add functionality.</p>

<p>You can check out the topic producing Open Data we created <a href="https://opensensors.io/topics/users/Louis/ODI/airquality">here</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Has Landed]]></title>
    <link href="http://blog.opensensors.io/blog/2015/02/16/search-has-landed/"/>
    <updated>2015-02-16T10:51:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2015/02/16/search-has-landed</id>
    <content type="html"><![CDATA[<p>There’s a lot of data out there. We’re doing our best to help you discover it. With the latest release of OpenSensors, users are now able to search the OpenSensors database of thousands of real-time public Open Data feeds and subscribe to Topics of interest.</p>

<p>To search the OSIO datasets simply type your query into the search box at the top of the site. A search query can relate to any parts of a Topic, name, unit, description, or the user who created the Topic.</p>

<p>Once found, you can subscribe to a Topic by clicking on the star icon allowing you to build a library of bookmarked Topics of interest that you can recall at any time in the new Favourite Topics page.</p>

<p>The savvy user will note the new Organisation page too. Organisations will enable you to own a topic tree for your business or citizen science group under</p>

<pre><code>/orgs/&lt;business name&gt;/*
</code></pre>

<p>but other people such as members of your group or customers can publish to the organisations topic tree, the clearest example of this is Github’s organisations.  Organisations will help you manage your products and assets out in the wild whether in cities or people’s homes.</p>

<p>This is the first, very much alpha, iteration of the seamless connected experiences we are building throughout the next releases over the coming days, along with Featured Feeds and dynamic data feed visualisations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OwnTracks Journey - Part One]]></title>
    <link href="http://blog.opensensors.io/blog/2015/01/20/owntracks-journey-part-one/"/>
    <updated>2015-01-20T12:56:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2015/01/20/owntracks-journey-part-one</id>
    <content type="html"><![CDATA[<p>Today we’re going to look at using the OwnTracks app within the OpenSensors platform. <a href="http://owntracks.org">&lsquo;OwnTracks&rsquo; (formerly MQTTitude)</a> allows you to keep track of your connected devices location. The app is open-source and uses open protocols for secure and private communications. First off we’ll start by installing the OwnTracks app on our device, I’m using a Nexus tablet for this attempt. Also, make sure your device <em>Location Data is enabled</em>. Whilst we’re waiting for that to sort itself out, let’s open up OpenSensors.io.</p>

<p>If you haven’t already, create a new account, when you’re in &ndash; select Devices on the nav bar to the left. You should see the interface below.</p>

<p><img src="http://blog.opensensors.io/images/createdev.jpg" /></p>

<p>Click <em>Create New Device</em>, give it a name and, optionally, a description (what is your device?). Importantly, choose whether you’d like to publish your data as public Open Data or Private Data. Whilst we’re on this screen, take note of the <em>Client ID</em> and <em>Password</em>, if you forget or lose your device password, don’t worry, just come back to <a href="https://opensensors.io/devices">this page</a>, select your device and click the small padlock icon on the far right next to the bin, this will reset your password.</p>

<p>Now we’ve got that sorted, let’s run OwnTracks on our device. You should see this screen. In the top right we see two buttons, on the left is the Report button, essentially submitting data to our server, and the right, options. Click options and then preferences.</p>

<p><img src="http://blog.opensensors.io/images/owntracks.png" /> alongside <img src="http://blog.opensensors.io/images/owntrackspref.png" /></p>

<p>As you can see we’re currently disconnected from any network, let’s change that. Firstly, click <em>Advanced</em> and select <em>Advanced connection preferences</em>. Now go back to preferences menu and click <em>Connection</em> and input the following &ndash; input your own <em>username</em>, <em>Device ID</em> and <em>Device Password</em> as displayed earlier on OpenSensors.io device manager, and type OpenSensors.io as <em>Host</em> and 1883 as <em>Port Number</em>. Change <em>Connection Security</em> to None. These are OSIO’s settings. You can go back to Preferences and change the automatic reporting interval etc.</p>

<p><img src="http://blog.opensensors.io/images/owntracksconnection.png" /></p>

<p>We’re all set. Now let’s go back to our devices page, and scroll down to the <em>Events</em> box, whereas before it looked this…</p>

<p><img src="http://blog.opensensors.io/images/events1.jpg" /></p>

<p>We should now be publishing data &ndash; test your new connected device, publishing your location data by pressing the <em>Report</em> button on the OwnTracks main screen. Each time you submit data through the app you should see…</p>

<p><img src="http://blog.opensensors.io/images/eventssuccess.jpg" /></p>

<p>You’re now publishing Open Data through the OpenSensors.io messaging broker! From this you are able to create smart apps and projects using your data, all we need to do now is have your app and project subscribe to our twitter hashtags of the IoT, topics &ndash; but you’ll have to wait and see until part two of our OwnTrack journey!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing an Arduino Wifi Shield]]></title>
    <link href="http://blog.opensensors.io/blog/2014/11/19/installing-an-arduino-wifi-shield/"/>
    <updated>2014-11-19T20:07:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2014/11/19/installing-an-arduino-wifi-shield</id>
    <content type="html"><![CDATA[<p>After a few Arduino projects (mainly blinking LEDs and connecting sensors) I tried
to connect my Arduino to the internet using a Wifi shield!</p>

<p>I started by looking at Arduino Wifi shield <a href="http://arduino.cc/en/Guide/ArduinoWiFiShield">instructions</a>.</p>

<p>Then I physically connected my Arduino and Wifi shield:</p>

<p><img src="http://blog.opensensors.io/images/arduino-wifishield.jpg" /></p>

<p>As a test I wanted to scan for available networks using the example code on <a href="http://arduino.cc/en/Guide/ArduinoWiFiShield#toc5">this</a>
Arduino Wifi shield webpage.</p>

<p>I mentioned in a previous blog <a href="http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux/">post</a>
I had an issue with the Arduino IDE and now use <a href="http://inotool.org/">inotool</a>.
It enables to code for Arduino in your text editor/IDE of choice and compile and
upload code from the command line (but it still needs the Arduino IDE to be installed).</p>

<p>Here&rsquo;s how I start a project with inotool:</p>

<pre><code>~$ mkdir new_project && cd new_project</code>
<code>~$ ino init</code></pre>


<p>Here&rsquo;s the structure of my project afterwards:</p>

<p><img src="http://blog.opensensors.io/images/directory_structure.png" /></p>

<p>I can then edit the code in src/sketch.ino. In that case I just copied/pasted
the code from Arduino&rsquo;s example:</p>

<p><img src="http://blog.opensensors.io/images/Test_wifishield.png" /></p>

<p>I built as usual using this command: <pre><code>~$ ino build</code></pre> &hellip; and got
the following error:</p>

<p><img src="http://blog.opensensors.io/images/build_error_wifi.png" /></p>

<p>=> It seemed there was a conflict between the Ethernet and WiFi Libraries.</p>

<p>&hellip; Then I kind of lost it (O_O) and tried all those things:</p>

<ul>
<li>bypassing both Arduino IDE and inotool by using a Makefile for compiling Arduino (<a href="http://hardwarefun.com/tutorials/compiling-arduino-sketches-using-makefile">http://hardwarefun.com/tutorials/compiling-arduino-sketches-using-makefile</a>)
   => and I got lost down makefile rabbit hole&hellip;</li>
<li>updating (or trying to update) the wifi shield firmware using Arduino&rsquo;s <a href="http://arduino.cc/en/Hacking/WiFiShieldFirmwareUpgrading">instructions</a> and blog posts.
  => when I finally managed it, it didn&rsquo;t have any effect&hellip;</li>
<li>downgrading from Arduino IDE version 1.0.5 to 1.0.2 (older versions are found <a href="http://arduino.cc/en/Main/OldSoftwareReleases">here</a>).
  => no improvement really&hellip;</li>
</ul>


<p>I went back and forth between those solutions and at best I could compile the sketch but my MAC address was 0.0.0.0 (same for my IP address)!</p>

<p><strong>Here&rsquo;s how it finally worked for me:</strong></p>

<ul>
<li>I downgraded to Arduino IDE version 1.0.1.</li>
<li>Copied &ldquo;arduino-1.0.1&rdquo; in usr/share/ and renamed it to &ldquo;arduino&rdquo; so that the path to the IDE was /usr/share/arduino/.</li>
<li>I added wifishield/ folder from <a href="https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield">https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield</a> to /usr/share/arduino/hardware/arduino/firmwares/.</li>
<li>I added the WiFi library from <a href="https://github.com/arduino/Arduino/tree/master/libraries/WiFi">https://github.com/arduino/Arduino/tree/master/libraries/WiFi</a> to /usr/share/arduino.</li>
<li>I upgraded the firmware (not sure if necessary) => <em>Note</em> : you need a USB 2.0 Mini B cable to link the wifi shield directly to your computer!

<ul>
<li> here are the instructions to install dfu-programmer: <a href="https://github.com/dfu-programmer/dfu-programmer">https://github.com/dfu-programmer/dfu-programmer</a></li>
<li> and you can get the latest wifi shield scripts from <a href="https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield/scripts">https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield/scripts</a></li>
<li> replace your scripts in /usr/share/arduino/hardware/arduino/firmwares/wifishield/scripts/ with the ones from Arduino Github repo.</li>
<li> close the J3 jumper on the shield (***),
   then run:
   <pre><code>~$ sudo ./ArduinoWifiShield_upgrade.sh -a /usr/share/arduino -f all</code></pre></li>
</ul>
</li>
</ul>


<p>Yay! (^o^) You can now try new projects like creating a <a href="http://arduino.cc/en/Tutorial/WiFiWebServer">webserver</a> or sending sensor data via internet!</p>

<br>


<p>(***) In case you wonder what a <strong>J3 jumper</strong> looks like,
those pictures could be useful to you:</p>

<ul>
<li>Here the J3 jumper is open (for when the shield communicate with the Arduino):</li>
</ul>


<p><img src="http://blog.opensensors.io/images/j3_opened.jpg" /></p>

<ul>
<li>Here the J3 jumper is closed (or in programming mode, to update the firmware):</li>
</ul>


<p><img src="http://blog.opensensors.io/images/j3_closed.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Open Data Startup]]></title>
    <link href="http://blog.opensensors.io/blog/2014/10/30/an-open-data-startup/"/>
    <updated>2014-10-30T18:00:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2014/10/30/an-open-data-startup</id>
    <content type="html"><![CDATA[<p>In that intense start up haze we occupy, the fact that
OpenSensors has turned 1 this month completely passed me
by! I feel that occasion should be marked with at least a post to
reflect on how far we have come in a year.</p>

<h2>An ODI startup <img src="http://blog.opensensors.io/images/odi.png" /></h2>

<p>The highlight of the year has to be our inclusion to the
<a href="http://opendatainstitute.org/">Open Data Institute&rsquo;s</a> startup
program.</p>

<p>The ODI&rsquo;s mission is to unlock the potential of public data held by
governments and businesses to help solve the world&rsquo;s hard
problems. As our mission is to build a connected world based on open
data and technologies, being part of the ODI&rsquo;s network of like minded
people is the natural home for OpenSensors.</p>

<h2>Engineering Middleware is Hard</h2>

<p>The original middleware we designed and prototyped for OpenSensors has long been thrown
out, actually rewritten several times. We have spent hundreds of
engineering hours making it fast and secure. We can now comfortably process millions of
messages per second from hundreds of thousands of devices.  And most
importantly we let each of our users get their own real time feeds of data that they are interested in.</p>

<p>If you told me a year ago that it would take this long to build the
middleware we would be happy with, how I would have laughed at you&hellip;.</p>

<h2>Hardware is very Hard</h2>

<p>After spending some time working under the radar, towards the middle of 2014 the Internet
of Things
<a href="http://www.forbes.com/sites/gilpress/2014/08/18/its-official-the-internet-of-things-takes-over-big-data-as-the-most-hyped-technology/">hypecycle</a>
suddenly went into overdrive.</p>

<p>That being said designing and manufacturing hardware products at scale
is a significantly different proposition to scaling software. The
skill sets necessary to build and manufacture electronics products is
rare and laborious. We have found ourselves in the surprising position
of prototyping hardware for clients and cities as well as learning the
process of manufacturing.</p>

<h2>Aims for the coming year</h2>

<p>Our central ambition for the next year is to make it very easy for
people to find and contribute to rich sources of real time data that is of interest to them.</p>

<p>We have some exciting partnerships and projects with various cities and
groups in parking, disability accessibility and smart buildings all publishing open data. We
also want to help showcase the excellent work of the many community
based environmental sensing projects.</p>

<h2>Sunsetting the early access period</h2>

<p>As of the 1st of December 2014, we will be charging for private use of the
service. Open Data projects will always be free. Private projects
will incur a small monthly cost towards the service based on the
number of devices you run.</p>

<p>For a full details of the pricing, see <a href="https://opensensors.io/pricing">https://opensensors.io/pricing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Arduino on Linux (Ubuntu)]]></title>
    <link href="http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux/"/>
    <updated>2014-09-13T07:56:00+01:00</updated>
    <id>http://blog.opensensors.io/blog/2014/09/13/getting-started-with-arduino-on-linux</id>
    <content type="html"><![CDATA[<p>Ordered and received your Arduino Uno (I actually received it a while ago!) now what? The first step is to rush to the <a href="http://arduino.cc/en/Guide/HomePage">&lsquo;Getting Started&rsquo;</a> page on Arduino&rsquo;s website.</p>

<p>To install Arduino on Linux (I&rsquo;m running Ubuntu 14.04) visit the <a href="http://playground.arduino.cc/Learning/Linux">wiki page</a> with instructions for most Linux distributions. I used the instructions for Ubuntu 12.04 or newer and ran <pre><code>~$ sudo apt-get update &amp;&amp; sudo apt-get install arduino arduino-core</code></pre>
Afterwards you should be able to plug your Arduino and use Arduino IDE to code/upload code to it. It didn&rsquo;t work directly for me. I couldn&rsquo;t launch Arduino IDE by clicking the logo so I tried the CLI <pre><code>~$ arduino</code></pre> Here&rsquo;s the error it returned:</p>

<blockquote><p>Exception in thread &ldquo;main&rdquo; java.lang.ExceptionInInitializerError.</p></blockquote>

<p><img src="http://blog.opensensors.io/images/arduino_bug1.png" /></p>

<p>I found a solution on <a href="http://askubuntu.com/questions/26474/unable-to-install-arduino">AskUbuntu</a> forum. I downgraded from java 7 to java 6 <strong>(***)</strong> using the command: <pre><code>~$ sudo update-alternatives &mdash;config java</code></pre>
I then managed to launch Arduino from the CLI (I was asked to authenticate) and tried to upload a code example to my Arduino (Files > Examples > 01.Basics > Blink).
I received this error message:</p>

<blockquote><p>processing.app.SerialNotFoundException: Serial port &lsquo;COM1&rsquo; not found. Did you select the right one from the Tools > Serial Port menu?</p></blockquote>

<p><img src="http://blog.opensensors.io/images/arduinobug2.png" /></p>

<p>In Tools I saw that Serial Port was greyed out so I couldn&rsquo;t even select the port.
from <a href="http://stackoverflow.com/questions/19322432/arduino-tools-serial-port-greyed-out">Stackoverflow</a> I found that to give read and write privilege on the usb port I could run Arduino with the administrator privileges.
And so I used <pre><code>~$ sudo arduino</code></pre> &ndash;> It worked! It blinked!
Here&rsquo;s a proof:</p>

<p><img src="http://blog.opensensors.io/images/arduino_blinks.jpg" /></p>

<h2>Troubleshooting</h2>

<ul>
<li>Check your Arduino IDE settings: Tools > Board (the right borad is select), Tool > Serial Port (the right port for your device is ticked).</li>
<li>Check all dependencies were downloaded with arduino and arduino-core .

<ul>
<li>Arduino&rsquo;s dependencies: arduino-core, default-jre, libjna-java, librtx-java</li>
<li>Arduino-core&rsquo;s dependencies: avr-libc, avrdude, gcc, gcc-avr</li>
</ul>
</li>
<li>Also try LadyAda&rsquo;s <a href="http://www.ladyada.net/learn/arduino/help.html">help page</a>.</li>
</ul>


<p><strong>(***) Well, well. You might realise later that you actually need java 7 for another program to work! But fear not, see the alternatives below.</strong></p>

<h2>Alternatives to Arduino IDE</h2>

<p><a href="http://arduino.cc/en/main/software">Arduino IDE</a> is based on java but luckily there other tools to write code for Arduino.</p>

<p>I tried <a href="http://inotool.org/">Ino</a> which is written in Python and is a command line tool and allows to write code in any text editor.
It is straightforward to install with instructions given. You will need to install picocom program if you don&rsquo;t have it <pre><code>~$ sudo apt-get install picocom</code></pre>
There are other <a href="https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces">alternatives</a> to the Arduino IDE like <a href="https://codebender.cc/">Codebender</a> which is an online development platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOT in the City]]></title>
    <link href="http://blog.opensensors.io/blog/2014/03/12/iot-in-the-city/"/>
    <updated>2014-03-12T13:41:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2014/03/12/iot-in-the-city</id>
    <content type="html"><![CDATA[<h2>Architecting Internet of Things Software for Cities</h2>

<p>We are often asked to advise on how best to build scalable products for
the Internet of Things, specifically to provide City wide services. City scale projects, also marketed as Smart or Future
Cities, within an IOT context are projects that combine aspects of the physical
and digital worlds to provide infrastructure and
services. Inherently these projects have to tackle the challenge of
scalable software management as well as distributed data management i.e. Big Data.</p>

<p>Among the projects we are involved in are parking management
applications using parking sensors, real time analysis of pollution data from
pollution monitors and using telemetry data to map routes for people with
disabilities.</p>

<p>The problem space that connected devices are used in is diverse but
technologically speaking the architectural model is fairly common. There are usually
a number of different types of sensors each measuring distinct factors
which in turn are listened to by either other devices or
software services. In the parking situation, a connected car can
listen to sensors in a particular area in order to ascertain
the nearest parking availability.  Any serious IOT project will
quickly evolve to having thousands, if not millions, of devices
connected to it.  It will also need to be able to cope with potentially millions of listeners such as the
individual cars in the parking scenario.</p>

<h2>Architectural Model</h2>

<p>We strongly favour the Publish/Subscribe (aka PUB/SUB) model of
building software in IOT.  In pub/sub, &ldquo;Publishers&rdquo; are usually the
devices but can also be data from smart phones and the &ldquo;Subscribers&rdquo; are all the
services that care about the data that the device is emitting.  In the PUB/SUB
model devices can have one or many subscribers and subscribers
can listen to one or many publishers. This is essential when building
systems for Cities.  Let&rsquo;s take the example of pollution monitoring,
there are many potential groups interested in this data from environmental groups to those
concerned by the impact on health.  Each group should be free to build
applications that are relevant to them without being impacted by the
needs of the other subscribers.  You do not want a situation where
each pollution monitor can only talk to one monolytic, and
often proprietary, system thereby needing to set up another pollution monitor on
the same street for each group which is frankly impractical and
wasteful. The PUB/SUB model eliminates this situation.</p>

<p>Scaling this model has been our obsession since the start of
opensensors.IO.  We have open sourced our engine to enable others to
be able to also create scalable services. <a href="https://github.com/OpenSensorsIO/azondi">Azondi</a> is our
<a href="http://opensensors.io/">MQTT</a> based engine to enable processing device data at
scale.</p>

<p>All of this has been possible by standing on the shoulders of giants
using battle test components.  Our MQTT broker relies on <a href="http://netty.io/">Netty</a> in order to provide an extensible
broker.  Netty is used by a host of tech companies to build various
real time systems such as Twitter, Facebook and Avast.  We also rely on
<a href="https://github.com/reactor/reactor">Project Reactor</a> to get a non-blocking
dispatcher for event driven programming based on the
<a href="http://en.wikipedia.org/wiki/Reactor_pattern">Reactor Pattern</a>. This dispatcher acts as a kind of sorting office between devices and their
listeners. It receives all messages and &lsquo;delivers&rsquo; messages to
interested listeners.</p>

<p>The most important motivation behind the technological choices we made to build
Azondi is the need to avoid polling at all costs. When you have
potentially 100,000s of services listening to each device message you
never want a situation where you are being simultaneously hit by requests.</p>

<h2>Model of a City</h2>

<p>Putting the above theory into a real world model, below is a diagram
on how Azondi would be implemented in reality.  Let us pretend that we are processing device data from
disparate sources for the London Borough of Camden.</p>

<p>In the example, there are environmental monitors that measure
pollution and noise as well as a weather station monitoring temperature and
wind speeds.  In addition, cars send information about traffic
 in their vicinity. On the other hand, Mary&rsquo;s car is listening for local parking
information and Sophie&rsquo;s phone listens to information on noise,
pollution, temperature and energy readings.  Both Mary&rsquo;s car and Sophie
would have the option to filter the information they receive
i.e. local information only or when pollution hits dangerous levels.  Camden Council cares about all of the data sets and
would probably have a dashboard or a decision support system.</p>

<h2>Illustration of Azondi in action</h2>

<p>Click on each device to get it to publish (random) data and watch the
subscribers receive their information.</p>

<iframe src="http://city-model.s3-website-us-east-1.amazonaws.com/#"
height=800px width=900px scrolling = "no"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your First Post]]></title>
    <link href="http://blog.opensensors.io/blog/2013/12/28/lorem/"/>
    <updated>2013-12-28T15:49:17+00:00</updated>
    <id>http://blog.opensensors.io/blog/2013/12/28/lorem</id>
    <content type="html"><![CDATA[<p>This is a lipsum page to demonstrate the theme&rsquo;s typography. Modify this post to your heart&rsquo;s content &ndash; or simply delete it.</p>

<p>Lorem ipsum dolor sit amet, ut brute legimus honestatis cum. Eirmod verear mei ne, id falli conclusionemque est, autem populo duo et. Causae noluisse ex sed. Solet mentitum salutandi ad mei, vis ex esse prima nullam, tation melius aliquid pri ea. Minimum sententiae mei ad, mei et reque novum.</p>

<p>Eu nec eirmod inermis, nominavi deleniti electram ut mei. Veri quidam vivendum sit id, voluptaria percipitur deterruisset an nec. Mei mazim erroribus eu, his in errem nonumy comprehensam. Modo pericula duo id, te vis facete verear. Ex cum volutpat corrumpit aliquando, ad vim assentior argumentum temporibus.</p>

<p>Id est eros justo movet, duo eu alii vitae. Quo altera imperdiet efficiantur in, nec error iudico an. Sed an etiam consul, invenire platonem nam an. Nec an integre splendide, libris oportere duo ei. Has eu solet sententiae, ex nam noster tractatos, sonet patrioque nec ad.</p>

<p>An minim mollis mediocrem est, lucilius atomorum ex eum. Quaeque probatus qui cu, ut mutat dolorem epicurei pro, vel labores delicata rationibus et. Cu eos sumo inermis, viderer molestiae assueverit ius ad. Cum atqui error insolens in. Iuvaret adolescens referrentur cu pri.</p>

<p>Ei putant perfecto atomorum eos, an civibus hendrerit sit. Pri cu probo nominavi, et sea cetero hendrerit incorrupte. Amet unum prompta per at, impedit reprehendunt an cum, vix laudem dolorem at. Suas blandit molestie in eum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Big Red Button]]></title>
    <link href="http://blog.opensensors.io/blog/2013/11/25/the-big-red-button/"/>
    <updated>2013-11-25T23:48:00+00:00</updated>
    <id>http://blog.opensensors.io/blog/2013/11/25/the-big-red-button</id>
    <content type="html"><![CDATA[<p>I have a development harness for my Clojure systems called <a href="https://github.com/juxt/jig?source=c">Jig</a>. Jig has
a feature that allows me to teardown and reinitialize the entire state
of the system, while loading in any code that has changed since the last
reset. It allows for a rapid development experience approaching that of
Smalltalk and LISP systems a few decades ago.</p>

<p>Along with resets, there are other notable signals that are appropriate
for the ceremony of pushing a &lsquo;big red button&rsquo; (besides launching
missiles at your enemy!).</p>

<ul>
<li>signalling that a new code release should be deployed into production</li>
<li>telling your family that dinner is ready</li>
<li>instructing the quadrocopter to ignore all further signals from the
trainee pilot, level off and gracefully descend to the ground</li>
</ul>


<p><img src="http://blog.opensensors.io/images/Big_Red_Button.jpg" /></p>

<p>The Big Red Button at opensensors was bought from <a href="http://www.dreamcheeky.com/big-red-button">Dream Cheeky</a></p>

<h2>Installing Mosquitto</h2>

<p>As a pre-requisite, we&rsquo;ll need to install an MQTT client.</p>

<p>For this, install <em>mosquitto</em>, an open source MQTT broker which comes
with command-line client tools for publishing messages. Full
instructions are here: <a href="http://mosquitto.org/download/">http://mosquitto.org/download/</a></p>

<h2>Detect button presses in Linux</h2>

<p>The Big Red Button doesn&rsquo;t come with a dedicated Linux driver, so we
must write one. These instructions assume you&rsquo;re using Arch Linux, if
you&rsquo;re using a different distribution then you may have to adjust them
accordingly (file locations may be slightly different).</p>

<h3>Adding the ~/dev/big_red_button~</h3>

<p>First we need to create a Unix =/dev= character device that we can use to
communicate with the Big Red Button.</p>

<p>Plug the big red button into a spare USB port and run the command
=lsusb=. If your big red button is attached, you should an entry like
this :&ndash;</p>

<pre><code>$ lsusb
Bus 001 Device 003: ID 1d34:000d Dream Cheeky Dream Cheeky Big Red Button
</code></pre>

<p>We need to find the =ID_MODEL= of the device. We can do this by running
=udevadm= and try disconnecting and reconnecting the device.</p>

<pre><code># udevadm monitor --environment udev | grep ID_MODEL=
ID_MODEL=DL100B_Dream_Cheeky_Generic_Controller
ID_MODEL=DL100B_Dream_Cheeky_Generic_Controller
ID_MODEL=DL100B_Dream_Cheeky_Generic_Controller
</code></pre>

<p>Or we can find out with the =udevadm= command.</p>

<pre><code># udevadm info /dev/bus/usb/001/003
P: /devices/pci0000:00/0000:00:1a.0/usb1/1-1/1-1.3
N: bus/usb/001/061
S: big_red_button
E: BUSNUM=001
...
E: ID_MODEL=DL100B_Dream_Cheeky_Generic_Controller
</code></pre>

<p>In this case, 001 and 003 correspond to the Bus and Device returned by
=lsusb= respectively.</p>

<p>Now we can pattern match on that udev environment value. As root, create
a file =/etc/udev/rules.d/50-big-red-button.rules= with the following
content, making sure that the ENV{ID_MODEL} entry matches the correct
string that we&rsquo;ve just found using :&ndash;</p>

<pre><code>ACTION=="add", ENV{ID_MODEL}=="DL100B_Dream_Cheeky_Generic_Controller", SYMLINK+="big_red_button", MODE="0666", RUN+="/usr/bin/mosquitto_pub -h mqtt.opensensors.io -t /my/big/red/button -m Add"
ACTION=="remove", ENV{ID_MODEL}=="DL100B_Dream_Cheeky_Generic_Controller", RUN+="/usr/bin/mosquitto_pub -h mqtt.opensensors.io -t /my/big/red/button -m Add"
</code></pre>

<p>This causes a new device to be added, =~/dev/big_red_button~=, with a
mode of 666 so that we can read and write from it without being
root. Also, every time the device is connected and disconnected, MQTT
messages are published to the topic =/my/big/red/button= at
OpenSensorsIO. We&rsquo;ll use this topic for this example, but you should set
this to something unique.</p>

<p>Reload the udev rules with the following command :&ndash;</p>

<pre><code>udevadm control --reload-rules
</code></pre>

<p>To test, disconnect the big red button (pull out the USB plug) and
reconnect it. Each time you do this you should see the device
=~/dev/big_red_button~= disappear and reappear.</p>

<h3>Writing the device driver</h3>

<p>We need to write some simple code to control the device which will print events to standard out.</p>

<p>Copy and paste the following code into a file, for example, =~big-red-button.c~=</p>

<pre><code>/*
,* Copyright © 2013, Malcolm Sparks &lt;malcolm@congreve.com&gt;. All Rights Reserved.
,*
,* A program to convert USB firing events from the Dream Cheeky 'Big Red Button' to MQTT events.
,*/

#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

#define LID_CLOSED 21
#define BUTTON_PRESSED 22
#define LID_OPEN 23

int main(int argc, char **argv)
{
  int fd;
  int i, res, desc_size = 0;
  char buf[256];

  /* Use a udev rule to make this device */
  fd = open("/dev/big_red_button", O_RDWR|O_NONBLOCK);

  if (fd &lt; 0) {
    perror("Unable to open device");
    return 1;
  }

  int prior = LID_CLOSED;

  while (1) {
    memset(buf, 0x0, sizeof(buf));
    buf[0] = 0x08;
    buf[7] = 0x02;

    res = write(fd, buf, 8);
    if (res &lt; 0) {
      perror("write");
      exit(1);
    }

    memset(buf, 0x0, sizeof(buf));
    res = read(fd, buf, 8);

    if (res &gt;= 0) {
      if (prior == LID_CLOSED &amp;&amp; buf[0] == LID_OPEN) {
         printf("Ready to fire!\n");
         fflush(stdout);
      } else if (prior != BUTTON_PRESSED &amp;&amp; buf[0] == BUTTON_PRESSED) {
        printf("Fire!\n");
        fflush(stdout);
      } else if (prior != LID_CLOSED &amp;&amp; buf[0] == LID_CLOSED) {
        printf("Stand down!\n");
        fflush(stdout);
      }
      prior = buf[0];
    }
    usleep(20000); /* Sleep for 20ms*/
  }
}
</code></pre>

<p>Compile the file</p>

<pre><code>$ cc big-red-button.c -o big-red-button
</code></pre>

<p>and run the executable, testing it by opening the lid on your device and pressing the (big red) button (a few times!). You should get output looking a bit like this :&ndash;</p>

<pre><code>$ ./big-red-button
Ready to fire!
Fire!
Fire!
Fire!
Fire!
Stand down!
</code></pre>

<p>If so, great, we now have a functioning device.</p>

<pre><code>$ ./big-red-button | mosquitto_pub -l -h mqtt.opensensors.io -t /my/big/red/button
</code></pre>

<p>Now go to <a href="http://opensensors.io">http://opensensors.io</a> and tune into the topic. Open the lid,
and start pressing the button. If you&rsquo;ve done everything correctly,
you&rsquo;ll see your messages in your browser.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Future Cities]]></title>
    <link href="http://blog.opensensors.io/blog/2013/10/08/future-cities/"/>
    <updated>2013-10-08T13:07:00+01:00</updated>
    <id>http://blog.opensensors.io/blog/2013/10/08/future-cities</id>
    <content type="html"><![CDATA[<p>We were honored to be a platform partner and host the data for <a href="http://futurecitieshackathon.com/">The Future Cities Hackathon: Open Urban Data for The Citizens</a> a collaborative project by <a href="http://datasciencelondon.org/">Data Science London</a> during the weekend of the 5th &ndash; 6th of October.</p>

<p>Granular Data sets where provided by the City of Westminster by street and a period of around a year.
The full list data sets are below:</p>

<ul>
<li>Anti Social Behavior data</li>
<li>Dog fouling</li>
<li>Graffiti</li>
<li>Parking Sensors</li>
<li>Parking Tickets issued</li>
<li>Crowd Dynamics data measuring foot falls once an hour</li>
<li>Parking Cashless transactions data</li>
</ul>


<p>Participants spent the weekend working on projects aimed to improve the experiences of City of Westminster residents.  There were approximately 15 submissions in order to win one of 3 prizes.  The prize categories were for Statistical modelling, Data Visualisation and a Windows phone application.  The quality of the final submissions were outstanding.</p>

<p>A few of the submissions were</p>

<ul>
<li><p>Team &lsquo;Fjölmenni&rsquo;, who won the Statistical modeling challenge, made a &lsquo;CrowdWalk&rsquo; application that predicted how busy streets would be by time and day.</p></li>
<li><p>Team &lsquo;Kung fu pandas&rsquo; made a number of statistical models on parking spaces, one of the most interesting was finding under utilized car parking spaces.</p></li>
</ul>


<p><img src="http://blog.opensensors.io/images/IMAG0731.jpg" /></p>

<ul>
<li>Team &lsquo;Street Sweep&rsquo; won the best Visualisation catergory and made a fantastic game 3d game using the opensensors.io api and open street map.  The game allowed players to clean dog fouling, vomit, etc from real data</li>
</ul>


<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/jWkxDIYp6sU "></iframe></div>


<p>There were many more amazing projects submitted that could make the lives of people of Westminster so much easier.</p>

<h3>The Problem</h3>

<p>Unfortunately, getting the data in the first place was incredibly difficult.  The painful process and route that it took to get to us was described by Carlos in his talk.  The data was passsed between a multitude of intermediary companies and crossed the Oceans a few times in the below manner</p>

<p>&ldquo;Sensor device >  Data Provider > people > DB > people > ETL > people> CSV > public entity> people > ETL>  IT Vendor> DW > people > CSV > Sharepoint > Dropbox > and… us !!!&rdquo;</p>

<p>This process harms everyone from the council to residents. We can and need to simplify this process.</p>

<p>Smart environments need not be a dream of the distant future if we open the data and enable businesses and developers to build services for the benefit of everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.opensensors.io/blog/2013/10/07/hello-world/"/>
    <updated>2013-10-07T06:06:00+01:00</updated>
    <id>http://blog.opensensors.io/blog/2013/10/07/hello-world</id>
    <content type="html"><![CDATA[<h2>Introducing <a href="http://opensensors.io">OpenSensors.IO</a></h2>

<p>Opensensors.IO is a project by <a href="http://atomicdatalabs.com/">Atomic Data Labs</a> built to simplify large scale publishing and subscribing of device data. We want to make available, under open data licences, the real time and historical data generated by devices all around us.</p>

<p>The motivation for this project is to enable developers and citizens to easily unlock the value of data generated all around us.  This data should be communally shared so that anyone can build services for their communities.</p>

<p>The &lsquo;Smart Cities / Future Cities&rsquo; revolution need not be about expensive infastructure projects that will cost governments millions or even billions to build.  Devices such as Parking Sensors, Energy Consumption devices as well as Pollution monitoring sensors already log and monitor most urban areas. Start ups and developers will be able to build smart applications from data from these devices alone if given the chance to get access to them.</p>

<p><strong>Publishing and Access of data under an <a href="http://www.theodi.org/guide/what-open-data">Open Data Licence</a> will be free to anyone irrespective of the volume of data.</strong></p>

<p>Individuals with a small number of personal devices will also be free to publish their data under a private licence and share with whom they choose.  Contact on &lsquo;<a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x68;&#101;&#x6c;&#x6c;&#111;&#x40;&#x6f;&#x70;&#x65;&#x6e;&#x73;&#101;&#x6e;&#x73;&#111;&#x72;&#115;&#46;&#x69;&#111;">&#104;&#x65;&#108;&#108;&#x6f;&#x40;&#111;&#x70;&#101;&#110;&#115;&#x65;&#110;&#x73;&#111;&#114;&#115;&#x2e;&#x69;&#111;</a>&rsquo; to join our private beta.</p>
]]></content>
  </entry>
  
</feed>
